面向对象编程OOP（Object Oriented Programming）
课程：优品学派，腾讯视频
详细代码参考D:\PytHon\ProJects\OOP
编程思想分为 面向过程、面向对象、函数式编程 三种。
面向过程编程，将不同的 功能、逻辑 写进不同的函数，再根据算法或流程去反复调用和执行函数。其核心是 数据结构。 人围绕计算机去编程。
面向对象编程，让计算机以符合人的思维习惯去分析解决问题。其核心是分析设计，代码只是用来解决问题的。解决问题需要不同的对象共同协作来完成。
思想：一切事物都是对象。
对象的属性：特征（有什么，名词）、行为（做什么，动词），及各对象之间的关系。
分析对象的特征，行为，可以从各个角度进行，理论上永远分析不完。
面向对象的基本特征是：封装、继承、多态
类是对象的模板、蓝图。【百度定义：具有相同特征（数据元素）和行为（功能）的对象的抽象就是类。对象的抽象是类，类的具体化就是对象，也可以说类的实例是对象，类实际上就是一种数据类型。】
面向对象思维 解决问题（完成项目）的 步骤：
①	 根据项目需求，分析对象【如：手机】的特征【品牌、价格、尺寸、硬件……】、行为【开机、关机、上网、通话……】、关系【与人、与环境 ……】
②	 抽象设计，即写类class【把对象的特征、行为定义出来】。用字段或属性来描述对象的特征，用方法（定义的函数）来描述对象的功能。
③	 实例化，映射到具体的实例，有具体的对象。【如：苹果手机……】
前两步属于 宏观分析，第三步 分析到具体的对象。第三步的过程称为类的实例化。
面向对象编程不一定非要 用 类。但是为了使代码方便阅读执行，尽量使用类。
不用类的方法：
①	可以使用列表、元素、字典表，其包含对象的特征与行为，直接进行实例化。
如【’apple’,5999.00,4.7,’A8’,’on’,’off’,’send_message’,’call’,’wifi’】
②	使用namedtuple（命名过的元组）方法来写模板蓝图，然后实例化，如下图所示。

规范的使用类：【具体代码 如下】
写类：将按照面向对象的方式分析的结果（对象的特征，行为）通过代码表现出来。
第一行【20】 定义类class；第二行 构造初始化函数__init__，其中包含对象的特征。第三行【21】 创建实例c1

# !usr/bin/evn python
# -*-  coding:utf-8  -*-
# OOP 面向对象编程
class Person:
    '''人这个类型'''
    people = [] # 将实例的name放进people的列表中，方便之后统计实例的数量

    def __init__(self,name,age):  #构造初始化函数，定义对象的特征。这里self的含义是当前的实例
        self.name = name
        self.age = age
        Person.people.append(self.name)

    def say(self,word):   #用函数来定义对象的功能，此时的函数称之为类的方法【这里的函数可以添加参数，而且有默认参数self 】
        print(f'这是{self.name}，今年{self.age},{word}')
        #上述语句中是用f代替format的简便写法，在Python3.6之后的版本中使用，同下面的语句
        # print('我是{0}，今年{1}\n'.format(self.name,self.age))

    def __str__(self):
        return self.name
    # 后面打印实例的时候，打印实例的名字 self.name
    # 将当前的对象实例用字符串的形式表示

    @classmethod    #装饰器，类方法，下面的方法与类相关，与实例不相关，不需要添加参数self，而需要添加这个装饰器，而方法的参数要用cls
    def print_all_people (cls):
        for name in cls.people:
            print(name)

    @staticmethod   #装饰器，静态方法，下面的方法与类和实例都不相关
    def do_sth():
        print('执行××××操作')

def main():
        P = Person  #创建实例
        p = P('Tom',20)     #类的实例化
        p.say('Hi !')
        print('-·-' * 20)
        p1 = P('John', 22)
        p1.say('Hello !')
        print('>·<' * 20)
        print(f'实例中一共有{len(Person.people)}个人')
        Person.print_all_people()
        Person.do_sth()
        #函数或方法的调用执行，需要加上括号，需要在前面指出类名，
        print(p)

if __name__ == '__main__':
    main()



